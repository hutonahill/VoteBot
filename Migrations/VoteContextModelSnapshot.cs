// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VoteBot.Data;

#nullable disable

namespace VoteBot.Migrations
{
    [DbContext(typeof(VoteContext))]
    partial class VoteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("VoteBot.Models.Election", b =>
                {
                    b.Property<uint>("ElectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AnonymousVotes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PublicResults")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("ServerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ElectionId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServerId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("VoteBot.Models.Issue", b =>
                {
                    b.Property<uint>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ElectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<int>("VotingMethod")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("VotingRoleIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IssueId");

                    b.HasIndex("ElectionId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("VoteBot.Models.Option", b =>
                {
                    b.Property<uint>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("AdvocateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Against")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("For")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<uint>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("OppositionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionString")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.HasKey("OptionId");

                    b.HasIndex("AdvocateId");

                    b.HasIndex("IssueId");

                    b.HasIndex("OppositionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("VoteBot.Models.Server", b =>
                {
                    b.Property<ulong>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("RolesAllowedToCreate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ServerId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("VoteBot.Models.User", b =>
                {
                    b.Property<uint>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ServerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("ServerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VoteBot.Models.Vote", b =>
                {
                    b.Property<uint>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OptionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PlacedAt")
                        .HasColumnType("TEXT");

                    b.Property<uint>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("VoteId");

                    b.HasIndex("OptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("VoteBot.Models.Election", b =>
                {
                    b.HasOne("VoteBot.Models.User", "Owner")
                        .WithMany("Elections")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoteBot.Models.Server", "Server")
                        .WithMany("Elections")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("VoteBot.Models.Issue", b =>
                {
                    b.HasOne("VoteBot.Models.Election", "Election")
                        .WithMany("Issues")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");
                });

            modelBuilder.Entity("VoteBot.Models.Option", b =>
                {
                    b.HasOne("VoteBot.Models.User", "Advocate")
                        .WithMany("AdvocateFor")
                        .HasForeignKey("AdvocateId");

                    b.HasOne("VoteBot.Models.Issue", "Issue")
                        .WithMany("Options")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoteBot.Models.User", "Opposition")
                        .WithMany("OppositionFor")
                        .HasForeignKey("OppositionId");

                    b.Navigation("Advocate");

                    b.Navigation("Issue");

                    b.Navigation("Opposition");
                });

            modelBuilder.Entity("VoteBot.Models.User", b =>
                {
                    b.HasOne("VoteBot.Models.Server", "Server")
                        .WithMany("Users")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("VoteBot.Models.Vote", b =>
                {
                    b.HasOne("VoteBot.Models.Option", "Option")
                        .WithMany("Votes")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoteBot.Models.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VoteBot.Models.Election", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("VoteBot.Models.Issue", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("VoteBot.Models.Option", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("VoteBot.Models.Server", b =>
                {
                    b.Navigation("Elections");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VoteBot.Models.User", b =>
                {
                    b.Navigation("AdvocateFor");

                    b.Navigation("Elections");

                    b.Navigation("OppositionFor");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
